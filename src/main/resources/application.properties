airlabs.api.key=f32fe9c6-5926-4f1c-b1bf-93d01e2d6ca4
airlabs.api.url=https://airlabs.co/api/v9/countries?
airlabs.api.urlCity=https://airlabs.co/api/v9/cities
airlabs.api.urlFlight=https://airlabs.co/api/v9/flights?api_key=f32fe9c6-5926-4f1c-b1bf-93d01e2d6ca4
airlabs.api.schedulesApiUrl=https://airlabs.co/api/v9/schedules?dep_iata=MIA&api_key=f32fe9c6-5926-4f1c-b1bf-93d01e2d6ca4
airlabs.api.urlTaxes=https://airlabs.co/api/v9/taxes?api_key=f32fe9c6-5926-4f1c-b1bf-93d01e2d6ca4
airlabs.api.urlquery=https://airlabs.co/api/v9/suggest?q={query}&api_key=f32fe9c6-5926-4f1c-b1bf-93d01e2d6ca4
server.port=9090
spring.datasource.url=jdbc:mysql://localhost:3306/flight_booking
spring.datasource.username=root
#spring.datasource.password=

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle=true
spring.datasource.validationQuery=SELECT 1
# ===============================
# = JPA / HIBERNATE
# ===============================
# Show or not log for each sql query
spring.jpa.show-sql=true
# Hibernate ddl auto (create, create-drop, update): with "create-drop" the database
# schema will be automatically created afresh for every start of application
spring.jpa.hibernate.ddl-auto=create-drop
# Naming strategy
# Hibernate logging
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE